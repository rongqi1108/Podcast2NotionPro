# 工作流名称
name: podcast sync

# 触发条件配置
on:
  # 允许手动触发工作流
  workflow_dispatch:
  # 定时任务配置（每3小时运行一次）0 */3 * * *
  # 北京时间早上4点 = UTC时间前一天的20点（夏令时）或21点（冬令时）
  schedule:
    - cron: "0 20 * * *"

# 并发控制：避免同一工作流的多个实例同时运行
concurrency:
  # 组标识符（按工作流名称+分支名称组合）
  group: ${{ github.workflow }}-${{ github.ref }}
  # 自动取消进行中的相同工作流
  cancel-in-progress: true

# 工作流任务定义
jobs:
  # 主任务：同步播客数据
  sync:
    name: Sync
    # 使用最新版本的Ubuntu运行环境
    runs-on: ubuntu-latest

    # 环境变量配置
    env:
        # 从GitHub Secrets中获取的敏感信息
        NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}       # Notion API令牌
        NOTION_PAGE: ${{ secrets.NOTION_PAGE }}         # Notion页面ID
        REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}    # 刷新令牌
        COOKIE: ${{ secrets.TONGYI_COOKIE }}           # 用于认证的Cookie
        YEAR: ${{ vars.YEAR }}                          # 年度变量（可配置）
        REF: ${{ github.ref }}                          # Git引用（分支/tag）
        REPOSITORY: ${{ github.repository }}            # 当前仓库名称

    # 任务步骤定义
    steps:
      # 第一步：检出仓库代码
      - name: Checkout
        uses: actions/checkout@v3  # 官方检出动作

      # 设置Python环境
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9  # 指定Python版本

      # 安装Python依赖
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip  # 升级pip
          pip install -r requirements.txt     # 安装依赖包

      # 执行播客同步脚本
      - name: podcast sync
        run: |
          podcast
        # 运行自定义的播客同步命令

      # 设置默认年份（如果未提供YEAR变量）
      - name: Set default year if not provided
        run: echo "YEAR=$(date +"%Y")" >> $GITHUB_ENV  # 获取当前年份
        if: env.YEAR == ''  # 仅当YEAR为空时执行

      # 生成Notion热力图数据
      - name: notion heatmap
        run: |
          github_heatmap notion \
            --notion_token "${{secrets.NOTION_TOKEN}}" \
            --database_id "${{ env.DATABASE_ID }}" \
            --date_prop_name "日期" \
            --value_prop_name "数量" \
            --unit "期" \
            --year $YEAR \
            --me "${{secrets.NAME}}" \
            --without-type-name \
            --background-color=${{ vars.background_color||'#FFFFFF'}} \
            --track-color=${{ vars.track_color||'#ACE7AE'}} \
            --special-color1=${{ vars.special_color||'#69C16E'}} \
            --special-color2=${{ vars.special_color2||'#549F57'}} \
            --dom-color=${{ vars.dom_color||'#EBEDF0'}} \
            --text-color=${{ vars.text_color||'#000000'}}

      # 重命名生成的热力图文件（避免缓存问题）
      - name: Rename notion.svg to a random name
        run: |
          cd OUT_FOLDER
        # 清理旧文件（保留notion.svg）
          find . -type f ! -name "notion.svg" -exec rm -f {} +
          cd ..
        # 生成随机文件名（使用UUID）
          RANDOM_FILENAME=$(uuidgen).svg
        # 重命名文件
          mv ./OUT_FOLDER/notion.svg ./OUT_FOLDER/$RANDOM_FILENAME
          echo "Renamed file to $RANDOM_FILENAME"

      # 提交代码变更
      - name: push
        run: |
        # 配置Git用户信息（使用GitHub Actions的默认身份）
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
        # 添加所有变更
          git add .
        # 提交变更（如果无变更则不报错）
          git commit -m 'add new heatmap' || echo "nothing to commit"
        # 推送变更（如果无变更则不报错）
          git push || echo "nothing to push"

      # 更新热力图数据
      - name: update heatmap
        run: |
            update_heatmap
        # 运行自定义的热力图更新命令